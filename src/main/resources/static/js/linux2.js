let linuxOverviewHTML = `OS is b/w applications and H/W, manage storage, memory, GUI, CLI, networking, security, users, and utilities <br/>
Linux originated from Unix which is leading in 1970-90. <br/>
GNU mission is to use free/open source tools for Unix.  <br/>
1992, Linus Torvalds added kernel to GNU and completes Linux OS.  <br/>
Linux's distribution includes kernel, GNU tools, additional software, and a package manager.   <br/>
Support is required for software maintenance. So distributions do that  <br/>
Distributions:  <br/>
Debian : Ubuntu, Mint, Kali   <br/>
RedHat : CentOS, Fedora  <br/>
SUSE   : OpenSUSE  <br/>
Arch Linux : LinuxHES, Monjaro 
<br/>
Boot process : <br/>
1) Switch on, will start bootstrap program called BIOS is executed using ROM(CMOS batter backed) <br/>
2) POST power on system test is executed  <br/>
3) Bootloader will be loaded using MBR(first segment in boot partition) <br/>
4) Bootloader loads the kernel selected, into RAM <br/>
5) Kernel, will start init process (systemd) <br/>
6) Kernel starts systemd in user space, and systemd starts all required initial programs.
`;

let shellHTML = `Shell is interpreter to execute commands. <br/>
Commands contains command [options] [arguments]  <br/>
Ex : ls -a /etc 
`;

let binHTML = `Essential user command binaries <br/>
bash/sh - command language interpreter that executes commands from standard input/file.  <br/>
date - print or set the system date and time  <br/>
echo - display a line of text  <br/>
uname - print system information  <br/>
mount/umount - mount/unmount a filesystem <br/>
hostname - show or set the system's host name  <br/>
ping - send ICMP ECHO_REQUEST to network hosts  <br/>
su - run a command with substitute user and group ID(Default - root)  <br/>
ssh - Connect to remote servers securely <br/>
history - display previously executed commands <br/>
info - read Info documents <br/>
who - show who is logged on
`;





let etcHTML = `Configuration files for the system <br/>
crontab is the program used to install a crontab table file, remove or list the existing tables used to serve the cron(8) daemon <br/>
cups - a standards-based, open source printing system <br/>
fstab - static information about the filesystems <br/>
host.conf - resolver configuration file <br/>
hosts - static table lookup for hostnames <br/>
init/systemmd - it acts as init system that brings up and maintains userspace services <br/>
issue - prelogin message and identification file <br/>
machine-id - Local machine ID configuration file <br/>
mtab - file contains the currently mounted filesystems <br/>
mtools - utilities to access DOS disks in Unix. <br/>
passwd - is used to update user's authentication token(s). <br/>
profile - contains Linux system wide environment and other startup scripts. <br/>
rpc - RPC program number data base <br/>
securetty - file which lists terminals from which root can log in <br/>
services - Internet network services list <br/>
shells - pathnames of valid login shells <br/>
tzset, tzname, timezone, daylight - initialize time conversion information 
`;

let storageHTML =
`Block device or block storage is hardware device which store and retrieve data at high speed. <br/>
We call them block devices, because we read/write the data in chunks/blocks. (1024 bytes) <br/>
Block devices can be mounted anywhere in the VFS <br/>
Dividing the storage space for different purposes(boot/root/swap) is called Partitioning <br/>
There are 2 partition types present today <br/>
MBR (master boot record) <br/>
1) It can hold 4 primary partitions <br/>
2) Manage disk devices upto 2 TB in size <br/>
3) We can add additional logical partitions using extents <br/>
GPT (GUID partition table) (Globally unique identifier) <br/>
1) It can have upto 128 partitions <br/>
2) Manage disk devices upto 9,400,000,000 TB in size <br/>
Formatting block devices <br/>
Formatting prepares the defined partition to hold data using particular file system <br/>
File Systems <br/>
Ext4 - Extended file system 4 suited for linux os and C programs <br/>
FAT32 - <br/>
NTFS - <br/>
XFS - high performance file system, using metadata journaling <br/>
BTRFS - modern feature rich copy on write file system(cloning, snapshots, volumes, etc...) <br/>
ZFS - <br/>
Files <br/>

lsblk - to list all physical blocks present in the system <br/>

`;

let kernelHTML =
`Linux is a monolithic operating system. <br/>
It has single executable file and runs in system space <br/>
MacOS is micro kernel based operating system. <br/>

`;

let systemCallsHTML =
`System calls provide an interface to the services made by an operating system <br/>
A set of interfaces to interact with hardware <br/>
Frees the user from learning low level programming <br/>
Increases system security and portability <br/>
A system call is generated by a user process(program) and they are called software interrupts or traps <br/>
strace - command to trace the system calls. <br/>

`;

let vfsHTML =
`File System Commands <br/>
chmod - change file mode bits  <br/>
chown - change file owner and group <br/>
touch - change file timestamps <br/>
cat - concatenate files and print on the standard output <br/>
grep, egrep, fgrep - print lines matching a pattern  <br/>
find - search for files in a directory hierarchy <br/>
pwd - print name of current/working directory <br/>
ls/dir - list directory contents <br/>
mkdir - make directories <br/>
dir - list directory contents <br/>
ln - make links between files <br/>
nano - File editor <br/>
vim - is a text editor that is upwards compatible to Vi  <br/>
cp - copy files and directories <br/>
mv - move (rename) files <br/>
rm - remove files or directories <br/>
more/less - is a filter for paging through text one screenful at a time <br/>
gzip, gunzip, zcat - compress or expand files <br/>
tar - an archiving utility <br/>
`;

let processHTML =
`Any running program is a process and assigned a PID and tracked by Kernel<br/>
Every process has parent process, PPID, except the init process. <br/>
Process can be assigned priority <br/>
When a process loaded into memory, it has stack, heap, code segment, data segment <br/>
Each process description is stored in Process descriptor <br/>
When the scheduler wants to switch to another process, current process state is saved <br/>
and reloaded once its back, it's called Context Switch <br/>
<br/>
Creating a process can be done by <br/>
1) system() - creates a sub process running the standard shell <br/>
2) fork() - creates child process by making an exact copy of parent <br/>
3) exec() - creates a new child process, replaces parent process, and returns only after error/failure <br/>
<br/>
States of process are New, Running, Waiting, Ready, Terminated
<br/>
Shell is a process, when you enter a command, control passes from shell to the process <br/>
And when command completes, control passes back from process to shell <br/>
<br/>
ps, top, htop are commands for process management 
Prcoessor Commands <br/>
ps - report a snapshot of the current processes <br/>
top - display Linux processes <br/>
openvt - start a program on a new virtual terminal (VT). <br/>
kill - terminate a process
bg - to send stopped job to background
fg - to get the job foreground
& at the end - to pu the job in background
jobs - to display all jobs running
sleep - to make the job sleep for some time
 `;

let memoryHTML =
`Every executing process uses memory. <br/>
Memory in linux is divided into 2, OS and Application. <br/>
Memory management involve RAM to Disk, Disk to RAM <br/>
Mapping between logical memory and physical memory is called virtual memory <br/>
Virtual memory is divided into chunks called Pages <br/>
Physical memory is divided into chunks called frames <br/>
Pages are mapped to Frames using Page Table <br/>
Linux will move pages between memory and swap <br/>
<br/>
Protection - linux checks and if program access memory outside its granted locations, it terminates.
<br/>
Programs can be organized into modules, and compiled independently. <br/>
Different degree of protection can be given to modules <br/>
Modules can be shared among processes <br/>
readelf - command to analyze the process structure <br/>
`;

let networkHTML =
`System ports span between 0-1023 called root ports. <br/>
User ports span between 1024-49151 <br/>
Dynamic ports - 49151-65535 <br/>
/etc/services - contains port numbers commonly defined in linux. <br/>
ip - display and sets network configuration <br/>
ping - uses icmp protocol to check connectivity <br/>
host - converts domain name to ip-address <br/>
dig - shows domain name information <br/>
whois - shows domain name metadata <br/>

`;

let ioMgmtHTML =
`
`;

let deviceDriversHTML =
`Each device in system has device controller containing buffer and set of registers. <br/>
Device driver understands device controller and presents unified interface to OS <br/>
To start an IO operation, device driver loads the registers within the device controller <br/>
Device controller take an action based on the contents in registers <br/>
Device controller uses buffer for small amount of data, DMA(direct memory access) for large data <br/>

`;

let linuxNodeDataArray = [

    {key: "Linux", desc: "Linux", color: "LightSteelBlue", isGroup: true, category: "tree", img: "assets/img/linux.png", expand: true, toolTipHTML: linuxOverviewHTML},

    {key: "Log In", desc: "Log In", color: "LightSteelBlue", isGroup: true, expand: true, category: "tree90", group: "Linux"},
    {key: "GUI", desc: "GUI", color: "WhiteSmoke", shape: "RoundedRectangle", category: "simple", group: "Log In"},
    {key: "CLI", desc: "CLI", color: "WhiteSmoke", shape: "RoundedRectangle", category: "simple", group: "Log In"},
    {key: "SSH", desc: "SSH", color: "WhiteSmoke", shape: "RoundedRectangle", category: "simple", group: "Log In"},
    {key: "PuTTY", desc: "PuTTY", color: "WhiteSmoke", shape: "RoundedRectangle", category: "simple", group: "Log In"},

    {key: "User Space", desc: "User Space", color: "LightSteelBlue", isGroup: true, expand: true, category: "tree90", group: "Linux"},
    {key: "Shell", desc: "Shell", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "User Space", toolTipHTML: shellHTML},
    {key: "Applications", desc: "Applications",color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "User Space",
        items: [{text: "Browser", color: "LightBlue"},
            {text: "IDE", color: "LightBlue"},
            {text: "Explorer", color: "LightBlue"}]},
    {key: "System Software", desc: "System Software", height: 45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "User Space"},
    {key: "User Processes", desc: "User Processes", height: 45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "User Space"},
    {key: "System Utilities", desc: "System Utilities", height: 45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "User Space"},
    {key: "Compilers/Interpreters", desc: "Compilers/Interpreters", height: 45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "User Space"},


    {key: "Kernel Space", desc: "Kernel Space",color: "LightSteelBlue", isGroup: true, expand: true, category: "tree", group: "Linux"},
    {key: "System Call Interface", desc: "System Call Interface", height: 45,color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel Space", toolTipHTML: systemCallsHTML},
    {key: "Kernel", desc: "Kernel",color: "LightSteelBlue", isGroup: true, expand: true, category: "tree", group: "Kernel Space", toolTipHTML: kernelHTML},
    {key: "Memory Management", desc: "Memory Manager (MM)",  height: 45,color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel", toolTipHTML: memoryHTML},
    {key: "Process Management", desc: "Process Scheduler (SCHED)", height: 45,color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel", toolTipHTML: processHTML},
    {key: "IPC", desc: "IPC (ipcs)", height: 45,color: "WhiteSmoke", isGroup: true, category: "tree", shape: "RoundedRectangle", group: "Kernel", expand: false},

    {key: "Pipe", desc: "Pipe |", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "IPC" },
    {key: "FIFO", desc: "FIFO >", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "IPC" },
    {key: "Message Queues", desc: "Message Queues", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "IPC" },
    {key: "Shared Memory", desc: "Shared Memory", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "IPC" },
    {key: "Semaphores", desc: "Semaphores", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "IPC" },
    {key: "Signals", desc: "Signals", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "IPC" },

    {key: "Virtual File System", desc: "Virtual File System(VFS)", height:45, color: "LightSteelBlue", isGroup: true, expand: false, group: "Kernel", category: "grid",
        toolTipHTML: vfsHTML},
    {key: "/root", desc: "/root", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "Root user directories "
    },
    {key: "/bin", desc: "/bin", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: binHTML
    },
    {key: "/etc", desc: "/etc", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: etcHTML
    },
    {key: "/sbin", desc: "/sbin", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "Essential System binaries "
    },
    {key: "/user", desc: "/user", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "User Application data/binaries "
    },
    {key: "/var", desc: "/var", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "Variable Data Files "
    },
    {key: "/dev", desc: "/dev", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "Device Files "
    },
    {key: "/home", desc: "/home", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "User home directories "
    },
    {key: "/lib", desc: "/lib", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "System Libraries "
    },
    {key: "/opt", desc: "/opt", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "Optional Software Applications "
    },
    {key: "/proc", desc: "/proc", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Virtual File System",
        toolTipHTML: "Process and Kernel information files "
    },

    {key: "Storage Management", desc: "Storage Management", height:45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel", toolTipHTML: storageHTML},

    {key: "Network Management", desc: "Network Interface (NET)", height:45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel", toolTipHTML: networkHTML},
    {key: "IO Management", desc: "IO Management", height:45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel", toolTipHTML: ioMgmtHTML},
    {key: "Device Drivers", desc: "Device Drivers", height:45, color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Kernel", toolTipHTML: deviceDriversHTML},


    {key: "Hardware", desc: "Hardware", color: "LightSteelBlue", isGroup: true, expand: true, category: "tree90", group: "Tech Skills"},
    {key: "Motherboard", desc: "Motherboard", color: "LightSteelBlue", isGroup: true, expand: true, category: "tree90", group: "Hardware"},
    {key: "CPU", desc: "CPU", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Motherboard"},
    {key: "Memory", desc: "Memory", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Motherboard"},
    {key: "Storage", desc: "Storage", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Hardware", toolTipHTML: storageHTML},
    {key: "Ethernet", desc: "Ethernet", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Hardware"},
    {key: "IO", desc: "IO", color: "WhiteSmoke", category: "simple", shape: "RoundedRectangle", group: "Hardware"},
];

let linuxLinkDataArray = [
    {name: "logInToUS", from: "Log In", to: "User Space", category: "simplelink"},
    {name: "USToKS", from: "User Space", to: "Kernel Space", category: "simplelink"},

    {name:"ksToh", from:"Kernel Space", to: "Hardware", category: "simplelink" },

    {name:"sToM", from:"Storage", to: "Memory", category: "simplelink" },
    {name:"mToCPU", from:"Memory", to: "CPU", category: "simplelink" },
    {name:"sciToKernel", from:"System Call Interface", to: "Kernel", category: "simplelink" },
    {name:"vfsToSM", from:"Virtual File System", to: "Storage Management", category: "simplelink" },

    {name:"vfsToMM", from:"Virtual File System", to: "Memory Management", category: "simplelink" },
    {name:"vfsToSched", from:"Virtual File System", to: "Process Management", category: "simplelink" },
    {name:"vfsToNM", from:"Virtual File System", to: "Network Management", category: "simplelink" },
    {name:"pmToIpc", from:"Process Management", to: "IPC", category: "simplelink" },
    {name:"vfsToIOM", from:"Virtual File System", to: "IO Management", category: "simplelink" },
    {name:"iomToDD", from:"IO Management", to: "Device Drivers", category: "simplelink" },





];

    nodeDataArray = nodeDataArray.concat(linuxNodeDataArray);
    linkDataArray = linkDataArray.concat(linuxLinkDataArray);

function linuxContainer() {
    let glModel = new go.GraphLinksModel(linuxNodeDataArray,linuxLinkDataArray);
    diagram.model = glModel;
    return diagram;
}